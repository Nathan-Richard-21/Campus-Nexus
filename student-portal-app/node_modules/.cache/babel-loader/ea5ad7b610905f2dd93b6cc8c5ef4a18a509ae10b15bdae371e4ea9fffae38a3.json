{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\campusnexus\\\\frontend\\\\student-portal-app\\\\src\\\\components\\\\Chatbot\\\\Chatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\n\n// Define message interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Knowledge base categories\nvar Category = /*#__PURE__*/function (Category) {\n  Category[\"Finance\"] = \"Finance\";\n  Category[\"StudentFees\"] = \"Student Fees\";\n  Category[\"Admin\"] = \"Administrative\";\n  Category[\"ICT\"] = \"ICT\";\n  Category[\"Examination\"] = \"Examination\";\n  Category[\"Consultation\"] = \"General Consultation\";\n  Category[\"Unknown\"] = \"Unknown\";\n  return Category;\n}(Category || {});\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Welcome message on component mount\n  useEffect(() => {\n    const welcomeMessage = {\n      text: \"Hello! I'm WSU Campus Assistant. How can I help you today? You can ask me about finances, student fees, admin processes, ICT services, or examination matters.\",\n      sender: 'bot',\n      timestamp: new Date(),\n      category: Category.Consultation\n    };\n    setTimeout(() => {\n      setMessages([welcomeMessage]);\n    }, 1000);\n  }, []);\n\n  // Auto-scroll to bottom of chat\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleInputChange = event => {\n    setUserInput(event.target.value);\n  };\n\n  // Handle \"Enter\" key press\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  // Determine the category of the user's question\n  const determineCategory = message => {\n    message = message.toLowerCase();\n    if (message.includes('nsfas') || message.includes('allowance') || message.includes('bursary') || message.includes('financial aid')) {\n      return Category.Finance;\n    }\n    if (message.includes('fee') || message.includes('payment') || message.includes('balance') || message.includes('pay online')) {\n      return Category.StudentFees;\n    }\n    if (message.includes('portal') || message.includes('student card') || message.includes('personal details') || message.includes('registration')) {\n      return Category.Admin;\n    }\n    if (message.includes('password') || message.includes('moodle') || message.includes('email') || message.includes('wifi') || message.includes('office 365') || message.includes('log in')) {\n      return Category.ICT;\n    }\n    if (message.includes('exam') || message.includes('transcript') || message.includes('result') || message.includes('remark') || message.includes('graduate') || message.includes('modules')) {\n      return Category.Examination;\n    }\n    return Category.Unknown;\n  };\n\n  // Get bot response based on user input and category\n  const getBotResponse = (userMessage, category) => {\n    const normalizedMessage = userMessage.toLowerCase();\n\n    // Finance category responses\n    if (category === Category.Finance) {\n      if (normalizedMessage.includes('apply for nsfas')) {\n        return \"To apply for NSFAS, visit the NSFAS website and apply online. You'll need a valid email, phone number, certified ID copy, and proof of income. WSU does not handle applications directly.\";\n      }\n      if (normalizedMessage.includes('nsfas allowance') || normalizedMessage.includes('when will allowance')) {\n        return \"NSFAS allowances are usually paid monthly after registration and funding confirmation. Check your student email for payment schedules or contact the WSU Financial Aid Office for specific dates.\";\n      }\n      if (normalizedMessage.includes('bursary application') || normalizedMessage.includes('documents for bursary')) {\n        return \"For bursary applications, you'll need certified ID, academic transcript, proof of registration, proof of income, and a motivational letter. Some bursaries may have extra requirements.\";\n      }\n      // Add more finance-related responses\n    }\n\n    // Student Fees category responses\n    if (category === Category.StudentFees) {\n      if (normalizedMessage.includes('outstanding balance') || normalizedMessage.includes('how much do i owe')) {\n        return \"To check your outstanding balance, log in to the WSU Student Portal or request a fee statement at the Student Accounts Office.\";\n      }\n      if (normalizedMessage.includes('payment plan')) {\n        return \"To apply for a payment plan, visit the Student Fees Office. You'll need to complete a payment arrangement form and provide proof of income.\";\n      }\n      if (normalizedMessage.includes('fee statement')) {\n        return \"You can download your fee statement from the student portal or request one from the Student Accounts section on campus.\";\n      }\n      // Add more fee-related responses\n    }\n\n    // Add responses for other categories similarly\n\n    // Default responses by category when specific question not recognized\n    if (category === Category.Admin) {\n      return \"For administrative issues, I recommend visiting the Admin Office with your student card and explaining your situation. For specific questions about student cards, personal details updates, or registration documents, please provide more details.\";\n    }\n    if (category === Category.ICT) {\n      return \"For ICT-related issues like password resets, Moodle access, or WiFi connectivity, please contact the ICT Helpdesk at helpdesk@wsu.ac.za or visit them in person.\";\n    }\n    if (category === Category.Examination) {\n      return \"For examination-related inquiries about transcripts, results, or graduation requirements, please visit the Examinations Office with your student card. Each request may have specific requirements and waiting periods.\";\n    }\n\n    // For any other cases or unknown\n    return \"I'm not sure I understand your question. Could you rephrase it or specify if it's about finances, fees, administrative matters, ICT services, or examination issues?\";\n  };\n  const handleSendMessage = () => {\n    if (userInput.trim() && !isTyping) {\n      const userMessage = {\n        text: userInput,\n        sender: 'user',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, userMessage]);\n      setUserInput('');\n      setIsTyping(true);\n\n      // Add temporary \"typing\" indicator message\n      setMessages(prev => [...prev, {\n        text: '...',\n        sender: 'bot',\n        timestamp: new Date(),\n        isLoading: true\n      }]);\n\n      // Determine category and get response\n      const category = determineCategory(userInput);\n      const botResponse = getBotResponse(userInput, category);\n\n      // Simulate API call delay\n      setTimeout(() => {\n        // Remove typing indicator and add real response\n        setMessages(prev => {\n          const filtered = prev.filter(msg => !msg.isLoading);\n          return [...filtered, {\n            text: botResponse,\n            sender: 'bot',\n            timestamp: new Date(),\n            category\n          }];\n        });\n        setIsTyping(false);\n      }, 1500);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-circle\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"WSU\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"WSU Campus Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"online-status\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"status-dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this), \"Online\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender} ${message.isLoading ? 'loading' : 'animate-in'}`,\n        children: message.isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-timestamp\",\n            children: message.timestamp.toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: handleInputChange,\n        onKeyPress: handleKeyPress,\n        placeholder: \"Ask about finances, fees, admin, ICT or exams...\",\n        disabled: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !userInput.trim() || isTyping,\n        className: isTyping ? 'disabled' : '',\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"24\",\n          height: \"24\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"22\",\n            y1: \"2\",\n            x2: \"11\",\n            y2: \"13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: \"22 2 15 22 11 13 2 9 22 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"qKypEqjheU3cOen9aXDDObaH0ZQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Category","Chatbot","_s","userInput","setUserInput","messages","setMessages","isTyping","setIsTyping","messagesEndRef","welcomeMessage","text","sender","timestamp","Date","category","Consultation","setTimeout","_messagesEndRef$curre","current","scrollIntoView","behavior","handleInputChange","event","target","value","handleKeyPress","key","handleSendMessage","determineCategory","message","toLowerCase","includes","Finance","StudentFees","Admin","ICT","Examination","Unknown","getBotResponse","userMessage","normalizedMessage","trim","prev","isLoading","botResponse","filtered","filter","msg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","Fragment","toLocaleTimeString","hour","minute","ref","type","onChange","onKeyPress","placeholder","disabled","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/campusnexus/frontend/student-portal-app/src/components/Chatbot/Chatbot.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\n\n// Define message interface\ninterface Message {\n    text: string;\n    sender: 'user' | 'bot';\n    timestamp: Date;\n    isLoading?: boolean;\n    category?: string;\n}\n\n// Knowledge base categories\nenum Category {\n    Finance = \"Finance\",\n    StudentFees = \"Student Fees\",\n    Admin = \"Administrative\",\n    ICT = \"ICT\",\n    Examination = \"Examination\",\n    Consultation = \"General Consultation\",\n    Unknown = \"Unknown\"\n}\n\nconst Chatbot: React.FC = () => {\n    const [userInput, setUserInput] = useState('');\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [isTyping, setIsTyping] = useState(false);\n    const messagesEndRef = useRef<HTMLDivElement>(null);\n    \n    // Welcome message on component mount\n    useEffect(() => {\n        const welcomeMessage = {\n            text: \"Hello! I'm WSU Campus Assistant. How can I help you today? You can ask me about finances, student fees, admin processes, ICT services, or examination matters.\",\n            sender: 'bot',\n            timestamp: new Date(),\n            category: Category.Consultation\n        };\n        \n        setTimeout(() => {\n            setMessages([welcomeMessage]);\n        }, 1000);\n    }, []);\n\n    // Auto-scroll to bottom of chat\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [messages]);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setUserInput(event.target.value);\n    };\n\n    // Handle \"Enter\" key press\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            handleSendMessage();\n        }\n    };\n\n    // Determine the category of the user's question\n    const determineCategory = (message: string): Category => {\n        message = message.toLowerCase();\n        \n        if (message.includes('nsfas') || \n            message.includes('allowance') || \n            message.includes('bursary') || \n            message.includes('financial aid')) {\n            return Category.Finance;\n        }\n        \n        if (message.includes('fee') || \n            message.includes('payment') ||\n            message.includes('balance') ||\n            message.includes('pay online')) {\n            return Category.StudentFees;\n        }\n        \n        if (message.includes('portal') || \n            message.includes('student card') || \n            message.includes('personal details') ||\n            message.includes('registration')) {\n            return Category.Admin;\n        }\n        \n        if (message.includes('password') || \n            message.includes('moodle') || \n            message.includes('email') ||\n            message.includes('wifi') ||\n            message.includes('office 365') ||\n            message.includes('log in')) {\n            return Category.ICT;\n        }\n        \n        if (message.includes('exam') || \n            message.includes('transcript') || \n            message.includes('result') ||\n            message.includes('remark') ||\n            message.includes('graduate') ||\n            message.includes('modules')) {\n            return Category.Examination;\n        }\n        \n        return Category.Unknown;\n    };\n\n    // Get bot response based on user input and category\n    const getBotResponse = (userMessage: string, category: Category): string => {\n        const normalizedMessage = userMessage.toLowerCase();\n        \n        // Finance category responses\n        if (category === Category.Finance) {\n            if (normalizedMessage.includes('apply for nsfas')) {\n                return \"To apply for NSFAS, visit the NSFAS website and apply online. You'll need a valid email, phone number, certified ID copy, and proof of income. WSU does not handle applications directly.\";\n            }\n            if (normalizedMessage.includes('nsfas allowance') || normalizedMessage.includes('when will allowance')) {\n                return \"NSFAS allowances are usually paid monthly after registration and funding confirmation. Check your student email for payment schedules or contact the WSU Financial Aid Office for specific dates.\";\n            }\n            if (normalizedMessage.includes('bursary application') || normalizedMessage.includes('documents for bursary')) {\n                return \"For bursary applications, you'll need certified ID, academic transcript, proof of registration, proof of income, and a motivational letter. Some bursaries may have extra requirements.\";\n            }\n            // Add more finance-related responses\n        }\n        \n        // Student Fees category responses\n        if (category === Category.StudentFees) {\n            if (normalizedMessage.includes('outstanding balance') || normalizedMessage.includes('how much do i owe')) {\n                return \"To check your outstanding balance, log in to the WSU Student Portal or request a fee statement at the Student Accounts Office.\";\n            }\n            if (normalizedMessage.includes('payment plan')) {\n                return \"To apply for a payment plan, visit the Student Fees Office. You'll need to complete a payment arrangement form and provide proof of income.\";\n            }\n            if (normalizedMessage.includes('fee statement')) {\n                return \"You can download your fee statement from the student portal or request one from the Student Accounts section on campus.\";\n            }\n            // Add more fee-related responses\n        }\n        \n        // Add responses for other categories similarly\n        \n        // Default responses by category when specific question not recognized\n        if (category === Category.Admin) {\n            return \"For administrative issues, I recommend visiting the Admin Office with your student card and explaining your situation. For specific questions about student cards, personal details updates, or registration documents, please provide more details.\";\n        }\n        \n        if (category === Category.ICT) {\n            return \"For ICT-related issues like password resets, Moodle access, or WiFi connectivity, please contact the ICT Helpdesk at helpdesk@wsu.ac.za or visit them in person.\";\n        }\n        \n        if (category === Category.Examination) {\n            return \"For examination-related inquiries about transcripts, results, or graduation requirements, please visit the Examinations Office with your student card. Each request may have specific requirements and waiting periods.\";\n        }\n        \n        // For any other cases or unknown\n        return \"I'm not sure I understand your question. Could you rephrase it or specify if it's about finances, fees, administrative matters, ICT services, or examination issues?\";\n    };\n\n    const handleSendMessage = () => {\n        if (userInput.trim() && !isTyping) {\n            const userMessage = {\n                text: userInput,\n                sender: 'user',\n                timestamp: new Date()\n            };\n            \n            setMessages(prev => [...prev, userMessage]);\n            setUserInput('');\n            setIsTyping(true);\n            \n            // Add temporary \"typing\" indicator message\n            setMessages(prev => [...prev, { \n                text: '...',\n                sender: 'bot',\n                timestamp: new Date(),\n                isLoading: true\n            }]);\n            \n            // Determine category and get response\n            const category = determineCategory(userInput);\n            const botResponse = getBotResponse(userInput, category);\n            \n            // Simulate API call delay\n            setTimeout(() => {\n                // Remove typing indicator and add real response\n                setMessages(prev => {\n                    const filtered = prev.filter(msg => !msg.isLoading);\n                    return [...filtered, {\n                        text: botResponse,\n                        sender: 'bot',\n                        timestamp: new Date(),\n                        category\n                    }];\n                });\n                setIsTyping(false);\n            }, 1500);\n        }\n    };\n\n    return (\n        <div className=\"chatbot-container\">\n            <div className=\"chatbot-header\">\n                <div className=\"chatbot-avatar\">\n                    <div className=\"avatar-circle\">\n                        <span>WSU</span>\n                    </div>\n                </div>\n                <div className=\"chatbot-info\">\n                    <h2>WSU Campus Assistant</h2>\n                    <span className=\"online-status\">\n                        <span className=\"status-dot\"></span>\n                        Online\n                    </span>\n                </div>\n            </div>\n            \n            <div className=\"chatbot-messages\">\n                {messages.map((message, index) => (\n                    <div \n                        key={index} \n                        className={`message ${message.sender} ${message.isLoading ? 'loading' : 'animate-in'}`}\n                    >\n                        {message.isLoading ? (\n                            <div className=\"typing-indicator\">\n                                <span></span>\n                                <span></span>\n                                <span></span>\n                            </div>\n                        ) : (\n                            <React.Fragment>\n                                <div className=\"message-content\">{message.text}</div>\n                                <div className=\"message-timestamp\">\n                                    {message.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                                </div>\n                            </React.Fragment>\n                        )}\n                    </div>\n                ))}\n                <div ref={messagesEndRef} />\n            </div>\n            \n            <div className=\"chatbot-input\">\n                <input\n                    type=\"text\"\n                    value={userInput}\n                    onChange={handleInputChange}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Ask about finances, fees, admin, ICT or exams...\"\n                    disabled={isTyping}\n                />\n                <button \n                    onClick={handleSendMessage}\n                    disabled={!userInput.trim() || isTyping}\n                    className={isTyping ? 'disabled' : ''}\n                >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                        <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line>\n                        <polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>\n                    </svg>\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}